name: Update Badges
run-name: Update Badges for ${{ inputs.target-repo }}

on:
  workflow_dispatch:
    inputs:
      target-repo:
        description: 'Target repository name'
        required: true
        default: 'delta-coverage-plugin'
      artifacts-source-run-id:
        description: 'Run ID of the workflow that generated the artifacts'
        required: false
      badges-artifact-name:
        description: 'Name of the badges artifact'
        required: false
      badges-artifact-id:
        description: 'Artifact ID of the badges'
        required: false


permissions:
  contents: write

jobs:
  update-badges:
    name: '🏷️ Update Badges on ${{ inputs.target-repo }}'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Badges Dir
        id: badges-dir
        run: |
          dir='${{ inputs.target-repo }}/badges'
          echo "value=${dir}" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts-tmp
          name: ${{ inputs.badges-artifact-name }}
          run-id: ${{ inputs.artifacts-source-run-id }}
          artifact-ids: ${{ inputs.badges-artifact-id }}
          repository: '${{ github.repository_owner }}/${{ inputs.target-repo }}'

      - name: Debug
        run: |
          ls -la artifacts-tmp/

      - name: Commit to repository
        if: false
        id: commit-to-repository
        shell: bash
        run: |
          git config user.name "Github Action of ${{ github.event.repository.name }} repo"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          repo_dir="${{ steps.badges-dir.outputs.value }}"
          mkdir -p $repo_dir
          file_path="$repo_dir/test.txt"
          echo "Creating file" > $file_path

          git add .

          if ! git diff --quiet HEAD; then
            git commit -m "${{ inputs.target-repo }}: Update badges"

            # Get current branch name
            BRANCH_NAME=$(git symbolic-ref --short HEAD)

            # Try to push with set-upstream first; if it fails, try pull-rebase-push
            if git push --set-upstream origin ${BRANCH_NAME} 2>/dev/null; then
              echo "Branch pushed successfully with --set-upstream"
            else
              echo "Branch may already exist on remote, trying pull-rebase-push"
              # https://stackoverflow.com/q/42743809/2971192
              for i in {1..5}; do 
                git pull --rebase origin ${BRANCH_NAME} && git push && break || sleep 5
              done
            fi

            revision=$(git rev-parse HEAD)
            echo "REVISION: ${revision}"
            echo "revision=${revision}" >> $GITHUB_OUTPUT        
          else
            echo "No changes to commit"
          fi
